# -*- coding: utf-8 -*-
#
# LiteX Build Environment Tool documentation build configuration file, created by
# sphinx-quickstart on Tue Aug  7 09:04:34 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import os.path
mydir = os.path.dirname(os.path.abspath(__file__))

import os
import sys
sys.path.insert(0, os.path.join(mydir, '..'))

# Horrible hack
on_rtd = os.environ.get('READTHEDOCS', None) == 'True'
inside_sphinx = os.environ.get('INSIDE_SPHINX', None) == 'True'
if on_rtd and not inside_sphinx:
    assert hasattr(sys, 'real_prefix')
    import subprocess
    print()
    print("Generating API documentation.")
    print("---------------------------------------------")
    os.environ['INSIDE_SPHINX'] = 'True'
    sys.stdout.flush()
    subprocess.check_call('rm -rf api; cd ..; sphinx-apidoc --ext-autodoc --ext-doctest --ext-todo --module-first -f -o docs/api lxbe_tool', shell=True)
    sys.stdout.flush()
    print("---------------------------------------------")
    print()

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.coverage',
    'sphinx.ext.doctest',               # Import doctest as examples
    'sphinx.ext.extlinks',              # Enable short links
    'sphinx.ext.githubpages',
    'sphinx.ext.ifconfig',
    'sphinx.ext.imgconverter',
    'sphinx.ext.inheritance_diagram',
    'sphinx.ext.intersphinx',           # Links to other Sphinx instances
    'sphinx.ext.linkcode',
    'sphinx.ext.mathjax',
    'sphinx.ext.napoleon',              # Google and NumPy style docstrings
    'sphinx.ext.todo',
    'sphinx.ext.viewcode',
    # Sphinx Contrib Packages
    #'sphinxcontrib.ansi',               # .. ansi-block::
    #'sphinxcontrib.argdoc',             # Automatic docs from argparse (maybe 'sphinxcontrib.autoprogram' instead?)
    #'sphinxcontrib.cheader',            # .. c:header:: <libfoobar.h> - No module named 'sphinx.util.compat'
    #'sphinxcontrib.cheeseshop',         # :pypi:`Sphinx`
    #'sphinxcontrib.cmakedomain',
    #'sphinxcontrib.documentedlist',     # .. documentedlist::
    #'sphinxcontrib.examplecode',
    #'sphinxcontrib.makedomain',         # https://bitbucket.org/klorenz/sphinxcontrib-makedomain
    #'sphinxcontrib.manpage',            # :linuxman:ls(1)
    #'sphinxcontrib.spelling',           # Spell checking!
    #'sphinxcontrib_trio',               # Better abstract and similar detection
    #'sphinx_git',                       # .. git_changelog::
    #'sphinx_autodoc_typehints',         #
]

extlinks = {
    'issue': ('https://github.com/mithro/lxbe-tool/issues/%s', 'issue ')
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ['.templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:

from recommonmark.parser import CommonMarkParser

source_parsers = {
    '.md': CommonMarkParser,
}
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'LiteX Build Environment Tool'
copyright = u'2018, Tim \'mithro\' Ansell, Sean \'xobs\' Cross'
author = u'Tim \'mithro\' Ansell, Sean \'xobs\' Cross'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'0.0.0'
# The full version, including alpha/beta/rc tags.
release = u'0.0.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#html_theme = 'alabaster'
# Cool looking ReadTheDocs theme
import sphinx_rtd_theme

html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]


# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',
        'navigation.html',
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
        'donate.html',
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'LiteXBuildEnvironmentTooldoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'LiteXBuildEnvironmentTool.tex', u'LiteX Build Environment Tool Documentation',
     u'Tim \'mithro\' Ansell, Sean \'xobs\' Cross', 'manual'),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'litexbuildenvironmenttool', u'LiteX Build Environment Tool Documentation',
     [author], 1)
]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'LiteXBuildEnvironmentTool', u'LiteX Build Environment Tool Documentation',
     author, 'LiteXBuildEnvironmentTool', 'One line description of project.',
     'Miscellaneous'),
]

intersphinx_mapping = {
    'python': ('https://docs.python.org/3/', (None, '_build/intersphinx_python.inv')),
    'migen': ('https://m-labs.hk/migen/manual/', (None, '_build/intersphinx_migen.inv')),
    # FIXME: 'litex': ('https://m-labs.hk/migen/manual/', (None, '_build/intersphinx_migen.inv')),
}

def linkcode_resolve(domain, info):
    # FIXME: Make this work!
    return None
    if domain != 'py':
        return None
    if not info['module']:
        return None
    filename = info['module'].replace('.', '/')
    return "http://somesite/sourcerepo/%s.py" % filename
